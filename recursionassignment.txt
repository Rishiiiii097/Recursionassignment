Q1 : Given an integer, find out the sum of its digits using recursion.
Input: n= 1234
Output: 10
Ans:-public class Main {
    public static int sumOfDigits(int n) {
        // Base case: If the number is a single digit, return the number itself
        if (n < 10) {
            return n;
        } else {
            // Recursive case: Sum the last digit and call the function recursively with the remaining digits
            return n % 10 + sumOfDigits(n / 10);
        }
    }

    public static void main(String[] args) {
        int n = 1234;
        System.out.println("Input: " + n);
        System.out.println("Output: " + sumOfDigits(n));
    }
}

Q2: Given a number n. Find the sum of natural numbers till n but with alternate signs.
That means if n = 5 then you have to return 1-2+3-4+5 = 3 as your answer.
Constraints : 0<=n<=1e6
Input1 : n = 10
Output 1 : -5
Ans:-public class Main {
    public static int sumOfAlternatingNumbers(int n) {
        int sum = 0;
        int sign = 1; // Start with positive sign

        for (int i = 1; i <= n; i++) {
            sum += sign * i; // Add the number with current sign
            sign *= -1; // Toggle the sign for the next iteration
        }

        return sum;
    }

    public static void main(String[] args) {
        int n = 10;
        System.out.println("Input: n = " + n);
        System.out.println("Output: " + sumOfAlternatingNumbers(n));
    }
}

Q3: Print the max value of the array [ 13, 1, -3, 22, 5].
Ans:-public class Main {
    public static void main(String[] args) {
        int[] array = {13, 1, -3, 22, 5};
        
        // Initialize max to the first element of the array
        int max = array[0];
        
        // Iterate through the array starting from the second element
        for (int i = 1; i < array.length; i++) {
            // If the current element is greater than the current max, update max
            if (array[i] > max) {
                max = array[i];
            }
        }
        
        // Print the maximum value
        System.out.println("Max value of the array: " + max);
    }
}

Q4 : Find the sum of the values of the array [92, 23, 15, -20, 10].
Ans:-public class Main {
    public static void main(String[] args) {
        int[] array = {92, 23, 15, -20, 10};
        
        // Initialize sum to 0
        int sum = 0;
        
        // Iterate through the array and add each element to sum
        for (int i = 0; i < array.length; i++) {
            sum += array[i];
        }
        
        // Print the sum of the values
        System.out.println("Sum of the values of the array: " + sum);
    }
}

Q5. Given a number n. Print if it is an armstrong number or not. An armstrong number is a number if the sum
of every digit in that number raised to the power of total digits in that number is equal to the number.
Example : 153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153 hence 153 is an armstrong number. (Easy)
Input1 : 153
Output1 : Yes
Input 2 : 134
Output2 : No
Ans:-public class Main {
    public static void main(String[] args) {
        int n = 153; // Example input
        
        // Calculate the number of digits in n
        int originalNumber = n;
        int numberOfDigits = 0;
        while (originalNumber != 0) {
            originalNumber /= 10;
            numberOfDigits++;
        }
        
        // Calculate the sum of each digit raised to the power of the total number of digits
        int sum = 0;
        originalNumber = n;
        while (originalNumber != 0) {
            int digit = originalNumber % 10;
            sum += Math.pow(digit, numberOfDigits);
            originalNumber /= 10;
        }
        
        // Check if the sum is equal to the original number
        if (sum == n) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
